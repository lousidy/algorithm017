题目1：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/
 寻找旋转排序数组中的最小值
解答：
class Solution {
  public int findMin(int[] nums) {
    if (nums.length == 1) {
      return nums[0];
    }

    int left = 0, right = nums.length - 1;
    if (nums[right] > nums[0]) {
      return nums[0];
    }
    
   
    while (right >= left) {
     
      int mid = left + (right - left) / 2;
      if (nums[mid] > nums[mid + 1]) {
        return nums[mid + 1];
      }

      
      if (nums[mid - 1] > nums[mid]) {
        return nums[mid];
      }

    
      if (nums[mid] > nums[0]) {
        left = mid + 1;
      } else {
      
        right = mid - 1;
      }
    }
    return -1;
  }
}



题目2： https://leetcode-cn.com/problems/search-a-2d-matrix/
搜索二维矩阵


题解：
class Solution {
  public boolean searchMatrix(int[][] matrix, int target) {
    int m = matrix.length;
    if (m == 0) return false;
    int n = matrix[0].length;


    int left = 0, right = m * n - 1;
    int pivotIdx, pivotElement;
    while (left <= right) {
      pivotIdx = (left + right) / 2;
      pivotElement = matrix[pivotIdx / n][pivotIdx % n];
      if (target == pivotElement) return true;
      else {
        if (target < pivotElement) right = pivotIdx - 1;
        else left = pivotIdx + 1;
      }
    }
    return false;
  }
}